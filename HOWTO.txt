--------------------------------------------------------------
Instalación:


GTSAM:
	sudo apt-get install libboost-all-dev
	sudo apt-get install cmake
	sudo apt-get install libtbb-dev
	cd ~
	#git clone https://github.com/borglab/gtsam
	#descargar la version 4.0 en lugar de la última version	
	cd gtsam
	mkdir build
	cd build
	cmake ..
	#make check #(optional, runs unit tests)
	make install


ROSinstall:
	sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
	sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
	sudo apt update
	sudo apt install ros-melodic-desktop-full
	sudo rosdep init
	rosdep update
	echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc
	source ~/.bashrc
	#source /opt/ros/melodic/setup.bash
	sudo apt install python-rosinstall python-rosinstall-generator python-wstool build-essential


ROSconfig:
	printenv | grep ROS
	source /opt/ros/melodic/setup.bash
	mkdir -p ~/catkin_ws/src
	cd ~/catkin_ws/
	catkin_make
	source devel/setup.bash
	echo $ROS_PACKAGE_PATH
	cd ~/catkin_ws/src
	catkin_create_pkg beginner_tutorials std_msgs rospy roscpp
	cd ~/catkin_ws
	catkin_make
	. ~/catkin_ws/devel/setup.bash

Velodyine en ROS:
	http://wiki.ros.org/velodyne/Tutorials/Getting%20Started%20with%20the%20Velodyne%20VLP16


--------------------------------------------------------------
Para visualizar se puede utilizar rVIZ
Primero se debe conectar velodyine con ros siguiendo el tutorial en el siguiente link:
http://wiki.ros.org/velodyne/Tutorials/Getting%20Started%20with%20the%20Velodyne%20VLP16

rVIZ:
export velopoints




roslaunch velodyne_pointcloud VLP16_points.launch

Para configurar el Lidar:
http://wiki.ros.org/velodyne/Tutorials/Getting%20Started%20with%20the%20Velodyne%20VLP16

ip: 192.168.1.222 (cualquier IP menos 192.168.1.201)
subnest: 255.255.255.0



--------------------------------------------------------------

como hacer dumps:
	iniciar y terminar la captura desde la terminal 
	// hardware ethernet: enp7s0  // para obtener el hardware, ejecutar:
		ifconfig

	start
		sudo tcpdump -w prueba.pcap -i enp7s0
	end
		ctrl+c
exportar
	abrir el dump
	pasar a zip
leer las hoja de datos
leer las referencias


--------------------------------------------------------------
Ejecución:

./update  #para descargar y compilar todas las bibliotecas inicialmente

To run in online mode (e.g. by replaying a bag file from another terminal or
using a real-time sensor stream), use

roslaunch blam_example test_online.launch

To run in offline mode, i.e. by loading a bagfile and processing its data as
fast as possible, set the bagfile name and scan topic in
`blam_example/launch/test_offline.launch`, and use


roslaunch blam_example test_offline.launch


También se puede reproducir un archivo de bolsa .bag para emular los datos 
de entrada del Lidar, permitiendo ejecución online mientras se reproduce la bolsa



--------------------------------------------------------------
Para poder ejecutar el programa se deben arreglar distintos conflictos

Muchas de las soluciones son tomadas de: https://github.com/erik-nelson/blam/issues/

Pero también está esta guia paso a paso con las soluciones
https://blog.csdn.net/xmy306538517/article/details/81122663

A continuación se muestran paso a paso la solución de varios conflictos:
--------------------------------------------------------------

FIX 1

Fix del update:  	<ros/ros.h>
copiar a la carpeta geomery_utils el archivo: geometry_utils.patch.txt
	en en la carpeta 
		internal/src/geometry_utils 
	ejecutar en terminal: 
		patch -p1 < geometry_utils.patch.txt

https://github.com/erik-nelson/blam/issues/34

--------------------------------------------------------------

FIX 2 
https://github.com/erik-nelson/blam/issues/36

en el archivo:
	internal/src/point_cloud_mapper/src/PointCloudMapper.cc

change

	if (!map_octree_->isVoxelOccupiedAtPoint(p)) {

to:

	double min_x, min_y, min_z,	 max_x, max_y, max_z;
	map_octree_->getBoundingBox(min_x, min_y, min_z, max_x, max_y, max_z);
	bool isInBox = (p.x >= min_x && p.x <= max_x) && (p.y >= min_y && p.y <= max_y) && (p.z >= min_z && p.z <= max_z);

	if (!isInBox || !map_octree_->isVoxelOccupiedAtPoint(p)) {

--------------------------------------------------------------

FIX 3
https://github.com/erik-nelson/blam/issues/26

En el archivo:
	internal/src/point_cloud_filter/src/PointCloudFilter.cc

Se debe inicializar el vector de indices de tipo entero con: 
	std::vector<int> indices;


I have solved the problem
Probably because your point cloud data contains"is_dense:false",It means that your point cloud data contains nan
my solution is edit the “point_cloud_filter.cc”， add the following code at the end of the Filter function


if (!points->is_dense){
points_filtered->is_dense = false;
std::vector indices;
pcl::removeNaNFromPointCloud(*points_filtered,*points_filtered, indices);
}


--------------------------------------------------------------

Para ejecutar:
agregar el repositorio al src del catkin
ejecutar en ~/catkin_workspace
    #rosdep install --from-paths src --ignore-src -r -y
    catkin_make
    source devel/setup.bash

terminal 1    inicializar ros
ejecutar roscore

terminal 2		ejecutar el programa
ejecutar roslauch XXXXXX


para ver los que estan corriendo:
rosnode list


para capturar datos en una bolsa (rosbag):
mkdir ~/bagfiles
cd ~/bagfiles
rosbag record -a
